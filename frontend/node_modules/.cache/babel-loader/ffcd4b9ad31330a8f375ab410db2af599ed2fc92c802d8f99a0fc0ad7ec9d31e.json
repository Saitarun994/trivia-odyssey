{"ast":null,"code":"import _slicedToArray from\"C:/Users/Sai Tarun/Desktop/Trivia odyssey/trivia-odyssey/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{useAuth0}from'@auth0/auth0-react';import LoginButton from'./LoginButton';import{jsx as _jsx}from\"react/jsx-runtime\";var HeaderLogin=function HeaderLogin(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),username=_useState2[0],setUsername=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),location=_useState4[0],setLocation=_useState4[1];var _useAuth=useAuth0(),loginWithRedirect=_useAuth.loginWithRedirect,isAuthenticated=_useAuth.isAuthenticated;useEffect(function(){// Simulating the retrieval of username (replace this with your actual method of getting the username)\n// For demonstration purposes, it's set after 2 seconds using setTimeout\nvar fetchUsername=function fetchUsername(){// Simulating a delay (2 seconds) to get the username\nsetTimeout(function(){// Replace this with your actual method of retrieving the username (e.g., fetching from backend, local storage, etc.)\nvar fakeUsername=\"JohnDoe\";// Replace this with the actual username\nsetUsername(fakeUsername);},2000);};// Simulating the retrieval of location (using geolocation API)\nvar fetchLocation=function fetchLocation(){if(navigator.geolocation){navigator.geolocation.getCurrentPosition(function(position){setLocation(\"Latitude: \".concat(position.coords.latitude,\", Longitude: \").concat(position.coords.longitude));},function(error){setLocation('Location not available');});}else{setLocation('Geolocation is not supported by your browser');}};fetchUsername();fetchLocation();},[]);return!isAuthenticated&&/*#__PURE__*/_jsx(LoginButton,{});};export default HeaderLogin;","map":{"version":3,"names":["React","useState","useEffect","useAuth0","LoginButton","jsx","_jsx","HeaderLogin","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","location","setLocation","_useAuth","loginWithRedirect","isAuthenticated","fetchUsername","setTimeout","fakeUsername","fetchLocation","navigator","geolocation","getCurrentPosition","position","concat","coords","latitude","longitude","error"],"sources":["C:/Users/Sai Tarun/Desktop/Trivia odyssey/trivia-odyssey/frontend/src/components/headerLogin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport LoginButton from './LoginButton';\n\nconst HeaderLogin = () => {\n  const [username, setUsername] = useState('');\n  const [location, setLocation] = useState('');\n  const { loginWithRedirect, isAuthenticated } = useAuth0();\n  useEffect(() => {\n    // Simulating the retrieval of username (replace this with your actual method of getting the username)\n    // For demonstration purposes, it's set after 2 seconds using setTimeout\n    const fetchUsername = () => {\n      // Simulating a delay (2 seconds) to get the username\n      setTimeout(() => {\n        // Replace this with your actual method of retrieving the username (e.g., fetching from backend, local storage, etc.)\n        const fakeUsername = \"JohnDoe\"; // Replace this with the actual username\n        setUsername(fakeUsername);\n      }, 2000);\n    };\n\n    // Simulating the retrieval of location (using geolocation API)\n    const fetchLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            setLocation(`Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`);\n          },\n          (error) => {\n            setLocation('Location not available');\n          }\n        );\n      } else {\n        setLocation('Geolocation is not supported by your browser');\n      }\n    };\n\n    fetchUsername();\n    fetchLocation();\n  }, []);\n\n  return (\n    !isAuthenticated && (\n    <LoginButton />\n    )\n  );\n};\n\nexport default HeaderLogin;"],"mappings":"uJAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,QAAQ,KAAQ,oBAAoB,CAC7C,MAAO,CAAAC,WAAW,KAAM,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExC,GAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAS,CACxB,IAAAC,SAAA,CAAgCP,QAAQ,CAAC,EAAE,CAAC,CAAAQ,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAArCG,QAAQ,CAAAF,UAAA,IAAEG,WAAW,CAAAH,UAAA,IAC5B,IAAAI,UAAA,CAAgCZ,QAAQ,CAAC,EAAE,CAAC,CAAAa,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAArCE,QAAQ,CAAAD,UAAA,IAAEE,WAAW,CAAAF,UAAA,IAC5B,IAAAG,QAAA,CAA+Cd,QAAQ,CAAC,CAAC,CAAjDe,iBAAiB,CAAAD,QAAA,CAAjBC,iBAAiB,CAAEC,eAAe,CAAAF,QAAA,CAAfE,eAAe,CAC1CjB,SAAS,CAAC,UAAM,CACd;AACA;AACA,GAAM,CAAAkB,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAA,CAAS,CAC1B;AACAC,UAAU,CAAC,UAAM,CACf;AACA,GAAM,CAAAC,YAAY,CAAG,SAAS,CAAE;AAChCV,WAAW,CAACU,YAAY,CAAC,CAC3B,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAED;AACA,GAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAA,CAAS,CAC1B,GAAIC,SAAS,CAACC,WAAW,CAAE,CACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,SAACC,QAAQ,CAAK,CACZX,WAAW,cAAAY,MAAA,CAAcD,QAAQ,CAACE,MAAM,CAACC,QAAQ,kBAAAF,MAAA,CAAgBD,QAAQ,CAACE,MAAM,CAACE,SAAS,CAAE,CAAC,CAC/F,CAAC,CACD,SAACC,KAAK,CAAK,CACThB,WAAW,CAAC,wBAAwB,CAAC,CACvC,CACF,CAAC,CACH,CAAC,IAAM,CACLA,WAAW,CAAC,8CAA8C,CAAC,CAC7D,CACF,CAAC,CAEDI,aAAa,CAAC,CAAC,CACfG,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN,MACE,CAACJ,eAAe,eAChBb,IAAA,CAACF,WAAW,GAAE,CACb,CAEL,CAAC,CAED,cAAe,CAAAG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}