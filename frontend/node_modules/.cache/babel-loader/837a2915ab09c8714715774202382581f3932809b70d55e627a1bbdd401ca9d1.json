{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai Tarun\\\\Desktop\\\\Trivia odyssey\\\\trivia-odyssey\\\\frontend\\\\src\\\\components\\\\Body.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\n//import hotspots from \"../data/hotspots\"\nimport Card from \"./Card\";\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loc = \"\";\nfunction Body() {\n  _s();\n  //! Sending location to server\n  const [hotspots, setHotspots] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  /*\r\n  useEffect(() => {\r\n   // Define the endpoint URL, replacing lat and lon with actual values\r\n  \r\n   const endpoint = '/api/rochester/'+\"43.1290992&-77.6290233\";\r\n   console.log(endpoint);\r\n   // Make the API request\r\n   axios.get(endpoint)\r\n     .then(response => {\r\n       // Extract the data from the response\r\n       const data = response.data;\r\n       console.log(data);\r\n       // Set the data to the hotspots state\r\n       setHotspots(data);\r\n     })\r\n     .catch(error => {\r\n       console.error('API request error:', error);\r\n     });\r\n  }, []); // The empty dependency array ensures this effect runs only once\r\n   const [questions, setQuestions] = useState([]);\r\n   useEffect(() => {\r\n   // Define the endpoint URL, replacing lat and lon with actual values\r\n   \r\n   const endpoint = '/api/getquestions/'+\"43.1290992&-77.6290233\";\r\n   console.log(endpoint);\r\n   // Make the API request\r\n   axios.get(endpoint)\r\n     .then(response => {\r\n       // Extract the data from the response\r\n       const data = response.data;\r\n       console.log(data);\r\n       // Set the data to the hotspots state\r\n       setHotspots(data);\r\n     })\r\n     .catch(error => {\r\n       console.error('API request error:', error);\r\n     });\r\n     .finally(() => {\r\n       setIsLoading(false); // Set loading state to false when done\r\n     });\r\n  }, []); // The empty dependency array ensures this effect runs only once\r\n  */\n\n  //? Api loading logic\n  useEffect(() => {\n    // Define the endpoint URL, replacing lat and lon with actual values\n    const endpoint = '/api/rochester/' + '43.1290992&-77.6290233';\n    console.log(endpoint);\n    // Make the API request\n    axios.get(endpoint).then(response => {\n      // Extract the data from the response\n      const data = response.data;\n      console.log(data);\n      // Set the data to the hotspots state\n      setHotspots(data);\n    }).catch(error => {\n      console.error('API request error:', error);\n    }).finally(() => {\n      setIsLoading(false); // Set loading state to false when done\n    });\n  }, []);\n\n  //console.log(hotspot.questions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col md:flex-row items-center justify-center p-2 bg-purple-200 min-h-720\",\n    children: isLoading ?\n    /*#__PURE__*/\n    // Show \"Loading...\" text if isLoading is true\n    _jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n      children: hotspots.map(hotspot => /*#__PURE__*/_jsxDEV(Card, {\n        name: hotspot.name,\n        ilink: hotspot.ilink,\n        desc: hotspot.desc,\n        link: hotspot.link\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Body, \"f8i4wDb0LzAsXUT+ACU7NLazTVA=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","Card","useEffect","useState","axios","jsxDEV","_jsxDEV","loc","Body","_s","hotspots","setHotspots","isLoading","setIsLoading","endpoint","console","log","get","then","response","data","catch","error","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","hotspot","name","ilink","desc","link","_c","$RefreshReg$"],"sources":["C:/Users/Sai Tarun/Desktop/Trivia odyssey/trivia-odyssey/frontend/src/components/Body.js"],"sourcesContent":["import React from 'react'\r\n//import hotspots from \"../data/hotspots\"\r\nimport Card from \"./Card\"\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nconst loc=\"\";\r\nfunction Body() {\r\n\r\n  //! Sending location to server\r\n  const [hotspots, setHotspots] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n   /*\r\n  useEffect(() => {\r\n    // Define the endpoint URL, replacing lat and lon with actual values\r\n   \r\n    const endpoint = '/api/rochester/'+\"43.1290992&-77.6290233\";\r\n    console.log(endpoint);\r\n    // Make the API request\r\n    axios.get(endpoint)\r\n      .then(response => {\r\n        // Extract the data from the response\r\n        const data = response.data;\r\n        console.log(data);\r\n        // Set the data to the hotspots state\r\n        setHotspots(data);\r\n      })\r\n      .catch(error => {\r\n        console.error('API request error:', error);\r\n      });\r\n  }, []); // The empty dependency array ensures this effect runs only once\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Define the endpoint URL, replacing lat and lon with actual values\r\n    \r\n    const endpoint = '/api/getquestions/'+\"43.1290992&-77.6290233\";\r\n    console.log(endpoint);\r\n    // Make the API request\r\n    axios.get(endpoint)\r\n      .then(response => {\r\n        // Extract the data from the response\r\n        const data = response.data;\r\n        console.log(data);\r\n        // Set the data to the hotspots state\r\n        setHotspots(data);\r\n      })\r\n      .catch(error => {\r\n        console.error('API request error:', error);\r\n      });\r\n      .finally(() => {\r\n        setIsLoading(false); // Set loading state to false when done\r\n      });\r\n  }, []); // The empty dependency array ensures this effect runs only once\r\n  */\r\n\r\n  //? Api loading logic\r\n  useEffect(() => {\r\n    // Define the endpoint URL, replacing lat and lon with actual values\r\n    const endpoint = '/api/rochester/' + '43.1290992&-77.6290233';\r\n    console.log(endpoint);\r\n    // Make the API request\r\n    axios\r\n      .get(endpoint)\r\n      .then((response) => {\r\n        // Extract the data from the response\r\n        const data = response.data;\r\n        console.log(data);\r\n        // Set the data to the hotspots state\r\n        setHotspots(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('API request error:', error);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false); // Set loading state to false when done\r\n      });\r\n  }, []);\r\n\r\n\r\n      //console.log(hotspot.questions);\r\n  return (\r\n    <div className=\"flex flex-col md:flex-row items-center justify-center p-2 bg-purple-200 min-h-720\">\r\n      {isLoading ? ( // Show \"Loading...\" text if isLoading is true\r\n        <p>Loading...</p>\r\n      ) : (\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n      \r\n      {hotspots.map(hotspot=>(\r\n            <Card\r\n                name={hotspot.name}\r\n                ilink={hotspot.ilink}\r\n                desc={hotspot.desc}\r\n                link={hotspot.link}\r\n                \r\n            />\r\n        ))}\r\n      </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default Body\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzB,MAAMC,GAAG,GAAC,EAAE;AACZ,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAEd;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE/C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAIE;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,QAAQ,GAAG,iBAAiB,GAAG,wBAAwB;IAC7DC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACrB;IACAV,KAAK,CACFa,GAAG,CAACH,QAAQ,CAAC,CACbI,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACA,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAC1BL,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;MACjB;MACAT,WAAW,CAACS,IAAI,CAAC;IACnB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBP,OAAO,CAACO,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC,CAAC,CACDC,OAAO,CAAC,MAAM;MACbV,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAGF;EACJ,oBACEP,OAAA;IAAKkB,SAAS,EAAC,mFAAmF;IAAAC,QAAA,EAC/Fb,SAAS;IAAA;IAAK;IACbN,OAAA;MAAAmB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAGnBvB,OAAA;MAAKkB,SAAS,EAAC,sDAAsD;MAAAC,QAAA,EAEpEf,QAAQ,CAACoB,GAAG,CAACC,OAAO,iBACfzB,OAAA,CAACL,IAAI;QACD+B,IAAI,EAAED,OAAO,CAACC,IAAK;QACnBC,KAAK,EAAEF,OAAO,CAACE,KAAM;QACrBC,IAAI,EAAEH,OAAO,CAACG,IAAK;QACnBC,IAAI,EAAEJ,OAAO,CAACI;MAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEtB,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACJ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpB,EAAA,CAjGQD,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAkGb,eAAeA,IAAI;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}